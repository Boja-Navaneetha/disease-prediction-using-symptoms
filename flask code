import pandas as pd
from flask import Flask, request, render_template
from statistics import mode
from sklearn.preprocessing import LabelEncoder
import numpy as np
import pickle

app = Flask(_name_)
app.config['STATIC_FOLDER'] = 'static'

l1 = ['back_pain', 'constipation', 'abdominal_pain', 'diarrhoea', 'mild_fever', 'yellow_urine', 'yellowing_of_eyes', 'acute_liver_failure', 'fluid_overload', 'swelling_of_stomach', 'swelled_lymph_nodes', 'malaise', 'blurred_and_distorted_vision', 'phlegm', 'throat_irritation', 'redness_of_eyes', 'sinus_pressure', 'runny_nose', 'congestion', 'chest_pain', 'weakness_in_limbs', 'fast_heart_rate', 'pain_during_bowel_movements', 'pain_in_anal_region', 'bloody_stool', 'irritation_in_anus', 'neck_pain', 'dizziness', 'cramps', 'bruising', 'obesity', 'swollen_legs', 'swollen_blood_vessels', 'puffy_face_and_eyes', 'enlarged_thyroid', 'brittle_nails', 'swollen_extremities', 'excessive_hunger', 'extra_marital_contacts', 'drying_and_tingling_lips', 'slurred_speech', 'knee_pain', 'hip_joint_pain', 'muscle_weakness', 'stiff_neck', 'swelling_joints', 'movement_stiffness', 'spinning_movements', 'loss_of_balance', 'unsteadiness', 'weakness_of_one_body_side', 'loss_of_smell', 'bladder_discomfort', 'foul_smell_of urine', 'continuous_feel_of_urine', 'passage_of gases', 'internal_itching', 'toxic_look_(typhos)', 'depression', 'irritability', 'muscle_pain', 'altered_sensorium', 'red_spots_over_body', 'belly_pain', 'abnormal_menstruation', 'dischromic _patches', 'watering_from_eyes', 'increased_appetite', 'polyuria', 'family_history', 'mucoid_sputum', 'rusty_sputum', 'lack_of_concentration', 'visual_disturbances', 'receiving_blood_transfusion', 'receiving_unsterile_injections', 'coma', 'stomach_bleeding', 'distention_of_abdomen', 'history_of_alcohol_consumption', 'fluid_overload', 'blood_in_sputum', 'prominent_veins_on_calf', 'palpitations', 'painful_walking', 'pus_filled_pimples', 'blackheads', 'scurrying', 'skin_peeling', 'silver_like_dusting', 'small_dents_in_nails', 'inflammatory_nails', 'blister', 'red_sore_around_nose', 'yellow_crust_ooze']

data = pd.read_csv("Training.csv.zip")
encoder = LabelEncoder()
data["prognosis"] = encoder.fit_transform(data["prognosis"])

symptom_index = {symptom: index for index, symptom in enumerate(l1)}

with open('rf_model.pkl', 'rb') as model_file:
    rf_model = pickle.load(model_file)

with open('nb_model.pkl', 'rb') as model_file:
    nb_model = pickle.load(model_file)

with open('svm_model.pkl', 'rb') as model_file:
    svm_model = pickle.load(model_file)

@app.route("/")
def home():
    return render_template("index2.html", symptoms=l1)

@app.route("/predict", methods=["POST"])
def predict():
    if request.method == 'POST':
        symptoms = [request.form[f"symptom{i}"] for i in range(1, 5) if request.form[f"symptom{i}"]]
        input_vector = np.zeros(132)

        for symptom in symptoms:
            index = symptom_index.get(symptom)
            if index is not None:
                input_vector[index] = 1

        input_vector = input_vector.reshape(1, -1)
        rf_prediction = rf_model.predict(input_vector)[0]
        nb_prediction = nb_model.predict(input_vector)[0]
        svm_prediction = svm_model.predict(input_vector)[0]

        final_prediction = mode([rf_prediction, nb_prediction, svm_prediction])
        predicted_disease_name = encoder.inverse_transform([final_prediction])[0]

        return render_template('predict.html', predicted_disease=predicted_disease_name)

if _name_ == '_main_':
    app.run(debug=True)
